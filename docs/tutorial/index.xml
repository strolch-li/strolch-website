<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial on Strolch</title><link>https://strolch.li/tutorial/</link><description>Recent content in Tutorial on Strolch</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://strolch.li/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration</title><link>https://strolch.li/tutorial/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/tutorial/configuration/</guid><description>Configuration Let&amp;rsquo;s start by creating a new Apache Maven project. We&amp;rsquo;ll need a POM with the proper dependencies. We expect you to be familiar with Apache Maven, so we&amp;rsquo;ll just show you a working POM file:
pom.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;li.strolch&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;strolch-bookshop&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;strolch-bookshop&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Bookshop built on Strolch&amp;lt;/description&amp;gt; &amp;lt;inceptionYear&amp;gt;2017&amp;lt;/inceptionYear&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;maven.build.timestamp.format&amp;gt;yyyy-MM-dd HH:mm:ss&amp;lt;/maven.build.timestamp.format&amp;gt; &amp;lt;buildTimestamp&amp;gt;${maven.build.timestamp}&amp;lt;/buildTimestamp&amp;gt; &amp;lt;jdk.version&amp;gt;1.8&amp;lt;/jdk.version&amp;gt; &amp;lt;jersey.version&amp;gt;2.25.1&amp;lt;/jersey.version&amp;gt; &amp;lt;slf4j.version&amp;gt;1.7.25&amp;lt;/slf4j.version&amp;gt; &amp;lt;logback.version&amp;gt;1.2.3&amp;lt;/logback.version&amp;gt; &amp;lt;petitparser.version&amp;gt;2.1.0&amp;lt;/petitparser.version&amp;gt; &amp;lt;hikaricp.version&amp;gt;4.0.3&amp;lt;/hikaricp.version&amp;gt; &amp;lt;postgresql.version&amp;gt;42.1.4&amp;lt;/postgresql.version&amp;gt; &amp;lt;gson.version&amp;gt;2.8.2&amp;lt;/gson.version&amp;gt; &amp;lt;annotation.version&amp;gt;1.3.1&amp;lt;/annotation.version&amp;gt; &amp;lt;javaxmail.version&amp;gt;1.6.0&amp;lt;/javaxmail.version&amp;gt; &amp;lt;serverlet.</description></item><item><title>Model</title><link>https://strolch.li/tutorial/model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/tutorial/model/</guid><description>Model Looking back at our functionality, we can list the following entities that need to be modelled (We&amp;rsquo;ll go into detail further down):
Book → books can be orderd UserCart → we want to store the cart of the user Account → we need to know where to send the orders PurchaseOrder → we need to know what was ordered and keep track of its state FromStock → we want to use activities to implement the process of an order In Strolch we model entities by defining the element as a template.</description></item><item><title>CRUD Book</title><link>https://strolch.li/tutorial/crud-book/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/tutorial/crud-book/</guid><description>Preparation Since Books are central to the bookshop, we&amp;rsquo;ll first create the CRUD REST API for them. The API will be as follows:
GET ../rest/books?query=,offset=,limit= GET ../rest/books/{id} POST ../rest/books PUT ../rest/books/{id} DELETE ../rest/books/{id} Thus corresponding with querying, getting, creating, updating and removing of books. So let&amp;rsquo;s go ahead and add these REST APIs to our project.
Our project is using JAX-RS 2.0 as the API and Jersey 2.x as the implementation, thus first we need to configure JAX-RS.</description></item></channel></rss>