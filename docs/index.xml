<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Strolch Overview on Strolch</title><link>https://strolch.li/</link><description>Recent content in Strolch Overview on Strolch</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 Aug 2022 09:10:00 +0200</lastBuildDate><atom:link href="https://strolch.li/index.xml" rel="self" type="application/rss+xml"/><item><title>Strolch PLC 1.2.3 released</title><link>https://strolch.li/blog/post-00018/</link><pubDate>Mon, 29 Aug 2022 09:10:00 +0200</pubDate><guid>https://strolch.li/blog/post-00018/</guid><description>Strolch PLC 1.2.3 released Strolch PLC version 1.2.3 has been deployed to Maven Central'
This is a maintenance release, as 1.2.2 pointed to Strolch 1.8.4 which was not released to Maven Central.</description></item><item><title>Strolch 1.8.5 and PLC 1.2.2 are out</title><link>https://strolch.li/blog/post-00017/</link><pubDate>Wed, 17 Aug 2022 15:50:00 +0200</pubDate><guid>https://strolch.li/blog/post-00017/</guid><description>Strolch 1.8.5 and PLC 1.2.2 are out JDK 17 ready!
Unbelievable, but the entire 1.7.x branch was never blogged about or deployed to Maven. We did do quite a few releases of the Java 11 version, but never got around to releasing to Maven.
Now we have released the 1.8.x branch of Strolch and deployed to Maven Central.
The 1.8.x branch requires JDK 17, but is still on Tomcat 9.</description></item><item><title>Strolch PLC now also on Maven Central</title><link>https://strolch.li/blog/post-00016/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00016/</guid><description>Strolch PLC now also on Maven Central Strolch PLC version 1.0.7 has been deployed to Maven Central for easier integration into your projects
To more easily use Strolch PLC in your project, we have now deployed the latest Strolch PLC version to Maven Central. This version 1.0.7 depends on Strolch version 1.6.100.
Enjoy coding!</description></item><item><title>Release of Strolch 1.6.100</title><link>https://strolch.li/blog/post-00015/</link><pubDate>Wed, 14 Jul 2021 20:25:11 +0200</pubDate><guid>https://strolch.li/blog/post-00015/</guid><description>Release of Strolch 1.6.100 The 100. Strolch release of the 1.6 branch and a brand new website!
Ok, so Maven doesn&amp;rsquo;t exactly have 100 releases on it, but even though we have been quiet on public releases, Strolch has seen many refactorings, fixes, new features etc. over the past three years of its last release.
Some notable changes:
I18n Support for StrolchExceptions. Better performance for reports on large joins.</description></item><item><title>Strolch Reports</title><link>https://strolch.li/blog/post-00014/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00014/</guid><description>Strolch Reports Strolch can do reports!
A feature we haven&amp;rsquo;t written about yet is the report API. Strolch has it&amp;rsquo;s own API to generate reports of data, and since we have a generic model, we use Resource of type Report to define them.
Go check out the documentation and then enjoy using this easy way to deliver the reports your peers require.</description></item><item><title>Strolch Searches</title><link>https://strolch.li/blog/post-00013/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00013/</guid><description>Strolch Searches Strolch queries are deprecated!
Strolch has had once again many changes, and fixes etc. One important thing to note is that we have removed support for transactional mode and have rewritten how models are searched. Thus the search API was born.
Go check out the Strolch Search documentation and then go rewrite your searches =)).
Strolch tag 1.6.51 has all those juicy changes!</description></item><item><title>Wow, the many changes!</title><link>https://strolch.li/blog/post-00012/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00012/</guid><description>Wow, the many changes! So many changes, and so long no update - not good!
Oh boy, have we forgotten to update you all on the latest awesome features in Strolch! There are over 123 commits since the last tag 1.3.0, so that alone merits a new blog post.
Currently the latest tag is 1.5.5, but this version is actually already quite old, as it was created on 31. January 2017 and there are 53 new commits ahead of the tag.</description></item><item><title>Strolch now on Maven Central</title><link>https://strolch.li/blog/post-00011/</link><pubDate>Thu, 22 Sep 2016 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00011/</guid><description>Strolch now on Maven Central Release Version 1.3.0 released and deployed to Maven Central
We have released a new version of Strolch so that you can now go and use the the latest features in Strolch.
Further we have now deployed Strolch to Maven Central, so it is easier than ever to use Strolch in your projects. No need to download first or use a special repository - just define the dependencies as you would any other dependency.</description></item><item><title>Versioning of objects</title><link>https://strolch.li/blog/post-00010/</link><pubDate>Mon, 08 Aug 2016 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00010/</guid><description>Versioning of objects Opt-In versioning of objects
A major new feature has landed in Strolch. Now, using opt-in, it is possible to have all changes to the object model be versioned. This means that any change to Order, Resource or Activity is automatically versioned and one can then revert to this version later on.
This will make it far easier to implement undo operations in applications since it is an inherent part of the lifecycle of objects in Strolch.</description></item><item><title>Release 1.2.0</title><link>https://strolch.li/blog/post-00009/</link><pubDate>Mon, 04 Jul 2016 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00009/</guid><description>Release 1.2.0 Release of Strolch 1.2.0
A few months ago we informed of the soon to be released version 1.1.0. Well, we decided to jump to 1.2.0 because we did some refactorings. All the eitchnet projects have been melted into Strolch and thus now it&amp;rsquo;s all one nice package. This will result in simpler development and less constraints on APIs between the two projects.
Other than that, not much changed, but we are continually working on Strolch, so go grab your latest copy and have fun coding!</description></item><item><title>Strolch Update</title><link>https://strolch.li/blog/post-00008/</link><pubDate>Sat, 09 Apr 2016 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00008/</guid><description>Strolch Update Long due update on Strolch development.
Although we have been rather quiet in the last couple of months, anyone viewing Strolch&amp;rsquo;s commit log, will see that we certainly didn&amp;rsquo;t halt Strolch development.
We have been hard at work, using Strolch in projects, which required many new features and fixes. The commit log shows as of today over 180 commits since the release tag 1.0.0.
Some of the most exciting changes are:</description></item><item><title>Activities: Beginning of the planning engine</title><link>https://strolch.li/blog/post-00007/</link><pubDate>Wed, 08 Jul 2015 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00007/</guid><description>Activities: Beginning of the planning engine The ground work of the Strolch planning engine has been laid.
One of the core ideas in building Strolch was to create a planning engine. The planning engine would work in combination of Order objects representing customer orders, Resource objects representing machines, human resources, etc., and Activity/Action hierarchies defining a workflow.
With the latest couple of commits to Strolch we have now added Activities and a basic planning of Actions onto Resources.</description></item><item><title>Strolch Documentation</title><link>https://strolch.li/blog/post-00006/</link><pubDate>Mon, 06 Apr 2015 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00006/</guid><description>Strolch Documentation Any good software has some decent documentation explaining concepts, best practices and gives examples.
So this post is to announce that there is now a new page on Strolch&amp;rsquo;s website with a bit of documentation. This first documentation explains the Strolch runtime and some of the do and don&amp;rsquo;t in Strolch code.
Bear with us, writing documentation takes time and can be outdated quickly, so we will make an effort to keep everything up to date and add more documentation, but this is a start.</description></item><item><title>Strolch Release 1.0.0</title><link>https://strolch.li/blog/post-00005/</link><pubDate>Tue, 31 Mar 2015 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00005/</guid><description>Strolch Release 1.0.0 Finally Version 1.0.0 of Strolch has been released and can be downloaded immediately.
Before 1.0.0 could be released, some major changes were decided, all driven by the first big project using Strolch as its underlying stack. Those changes were minor, and really major, but should make Strolch better and was important for the first release.
Here is a list of the most interesting changes:
Java 8 - Strolch was ported to Java 8.</description></item><item><title>DurationParameter and other minor changes: Release 1.0.0-RC4</title><link>https://strolch.li/blog/post-00004/</link><pubDate>Thu, 09 Oct 2014 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00004/</guid><description>DurationParameter and other minor changes: Release 1.0.0-RC4 New DurationParameter and additional minor changes: Release of 1.0.0-RC4 which can be downloaded on the download page.
While implementing a use case in a Strolch based application it was detected that an essential parameter type was missing, the DurationParameter. This parameter currently stores the value as a long in memory and serializes to ISO8601. As soon as we move Strolch to Java8, we will change this to use the Period class in the new Java8 date and time API.</description></item><item><title>DB Initialization: Release 1.0.0-RC3</title><link>https://strolch.li/blog/post-00003/</link><pubDate>Sun, 24 Aug 2014 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00003/</guid><description>DB Initialization: Release 1.0.0-RC3 Important feature Database Initialization added: Release of 1.0.0-RC3 which can be downloaded on the download page.
When living continuous integration and continuous delivery, it is vital that things like database migrations and initialization are performed in a controlled, but automatic way.
A Strolch-based application is using the PostgreSQL persistence layer. The implementation understands the concepts of migration, and validating the database schema, but currently a mechanism to automatically initialize the database with a minimal set of data was missing.</description></item><item><title>Release 1.0.0-RC2</title><link>https://strolch.li/blog/post-00002/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00002/</guid><description>Release 1.0.0-RC2 Scratch that RC1, here is the brand new 1.0.0-RC2 which can be downloaded on the download page.
So, as expected there were a few bugs, for instance the Strolch tutorial apps didn&amp;rsquo;t start, so now i fixed those and released an RC2. Go get it and give it a try!</description></item><item><title>Release 1.0.0-RC1</title><link>https://strolch.li/blog/post-00001/</link><pubDate>Wed, 20 Aug 2014 00:00:00 +0100</pubDate><guid>https://strolch.li/blog/post-00001/</guid><description>Release 1.0.0-RC1 With the Go-Live of a Strolch-based application around the corner, it is time to release Version 1.0.0 of Strolch. To this affect we have now released version 1.0.0-RC1 which can be downloaded on the download page.
Story Strolch as a component based software agent has been two years in the making. The concepts in Strolch have been taken from a proprietary planning, scheduling and controlling software agent, which was, and is been, used in industrial automation, logistics and production.</description></item><item><title>Architecture</title><link>https://strolch.li/documentation/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/architecture/</guid><description>Architecture Birds View A Strolch agent&amp;rsquo;s architecture can be seen as a simple three-tier architecture. The presentation layer is mostly a web frontend, where the communication with the agent is done via REST API calls.
The agent itself implements the business logic using Services, Commands, Queries etc.
The agent can communicate with other 3rd systems using any API, where it is preferred to use JSON over REST.
The agent can use a standard RDBMS as a storage system, where currently DAOs have been implemented only for PostgreSQL.</description></item><item><title>Configuration</title><link>https://strolch.li/tutorial/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/tutorial/configuration/</guid><description>Configuration Let&amp;rsquo;s start by creating a new Apache Maven project. We&amp;rsquo;ll need a POM with the proper dependencies. We expect you to be familiar with Apache Maven, so we&amp;rsquo;ll just show you a working POM file:
pom.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;li.strolch&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;strolch-bookshop&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;strolch-bookshop&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Bookshop built on Strolch&amp;lt;/description&amp;gt; &amp;lt;inceptionYear&amp;gt;2017&amp;lt;/inceptionYear&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;maven.build.timestamp.format&amp;gt;yyyy-MM-dd HH:mm:ss&amp;lt;/maven.build.timestamp.format&amp;gt; &amp;lt;buildTimestamp&amp;gt;${maven.build.timestamp}&amp;lt;/buildTimestamp&amp;gt; &amp;lt;jdk.version&amp;gt;1.8&amp;lt;/jdk.version&amp;gt; &amp;lt;jersey.version&amp;gt;2.25.1&amp;lt;/jersey.version&amp;gt; &amp;lt;slf4j.version&amp;gt;1.7.25&amp;lt;/slf4j.version&amp;gt; &amp;lt;logback.version&amp;gt;1.2.3&amp;lt;/logback.version&amp;gt; &amp;lt;petitparser.version&amp;gt;2.1.0&amp;lt;/petitparser.version&amp;gt; &amp;lt;hikaricp.version&amp;gt;4.0.3&amp;lt;/hikaricp.version&amp;gt; &amp;lt;postgresql.version&amp;gt;42.1.4&amp;lt;/postgresql.version&amp;gt; &amp;lt;gson.version&amp;gt;2.8.2&amp;lt;/gson.version&amp;gt; &amp;lt;annotation.version&amp;gt;1.3.1&amp;lt;/annotation.version&amp;gt; &amp;lt;javaxmail.version&amp;gt;1.6.0&amp;lt;/javaxmail.version&amp;gt; &amp;lt;serverlet.</description></item><item><title>Prerequisites</title><link>https://strolch.li/development/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/development/prerequisites/</guid><description>Prerequisites To start developing Strolch you need an installed:
Java JDK 17 Apache Maven 3.x You can install these using the awesome SDKMAN!:
$ curl -s &amp;#34;https://get.sdkman.io&amp;#34; | bash source &amp;#34;$HOME/.sdkman/bin/sdkman-init.sh&amp;#34; sdk version sdk install java sdk install maven sdk install mvnd Test your Java installation:
$ java -version openjdk version &amp;#34;17.0.4&amp;#34; 2022-07-19 OpenJDK Runtime Environment Temurin-17.0.4+8 (build 17.0.4+8) OpenJDK 64-Bit Server VM Temurin-17.0.4+8 (build 17.0.4+8, mixed mode, sharing) Test your Maven installation:</description></item><item><title>Building Strolch</title><link>https://strolch.li/development/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/development/building/</guid><description>Building Strolch Note: You don&amp;rsquo;t have to build Strolch if you want to use the version on Maven central. If you need a snapshot version, the release you want isn&amp;rsquo;t on Maven central or you want to use the Strolch Maven archetypes, then go ahead and build Strolch.
Building Strolch is just a few lines:
git clone https://github.com/strolch-li/strolch.git cd strolch mvn clean install -DskipTests Note: To run the tests you will need to configure the PostgreSQL Databases.</description></item><item><title>Model</title><link>https://strolch.li/documentation/model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/model/</guid><description>Model Before we dive into the entire model, let&amp;rsquo;s show an example and how it would be modelled in Strolch and use in Strolch:
The model has four entities, which will be modelled using 3 Resources and 1 Order object. The objects have numerous fields and the following relationships:
Bidirectional between Article &amp;lt;-&amp;gt; Product Unidirectional from Order -&amp;gt; Article Unidirectional from Order -&amp;gt; Customer A possible model would look as follows:</description></item><item><title>Model</title><link>https://strolch.li/tutorial/model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/tutorial/model/</guid><description>Model Looking back at our functionality, we can list the following entities that need to be modelled (We&amp;rsquo;ll go into detail further down):
Book → books can be orderd UserCart → we want to store the cart of the user Account → we need to know where to send the orders PurchaseOrder → we need to know what was ordered and keep track of its state FromStock → we want to use activities to implement the process of an order In Strolch we model entities by defining the element as a template.</description></item><item><title>CRUD Book</title><link>https://strolch.li/tutorial/crud-book/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/tutorial/crud-book/</guid><description>Preparation Since Books are central to the bookshop, we&amp;rsquo;ll first create the CRUD REST API for them. The API will be as follows:
GET ../rest/books?query=,offset=,limit= GET ../rest/books/{id} POST ../rest/books PUT ../rest/books/{id} DELETE ../rest/books/{id} Thus corresponding with querying, getting, creating, updating and removing of books. So let&amp;rsquo;s go ahead and add these REST APIs to our project.
Our project is using JAX-RS 2.0 as the API and Jersey 2.x as the implementation, thus first we need to configure JAX-RS.</description></item><item><title>Do and Don't</title><link>https://strolch.li/documentation/do-and-donts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/do-and-donts/</guid><description>This page discusses things you should and shouldn&amp;rsquo;t do when using Strolch The following is a simple list of do&amp;rsquo;s and don&amp;rsquo;ts:
1 Service per use-case, should mostly delegate to Commands.
Commands implement use-cases or parts of it, and are thus reusable.
Subclass ResourceSearch, OrderSearch and ActivitySearch when implementing use-case specific search - this allows privilege checking.
One Transaction at a time - no TX inside of another TX.</description></item><item><title>Maven Archetypes</title><link>https://strolch.li/development/maven-archetypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/development/maven-archetypes/</guid><description>Maven Archetypes Maven offers archetypes to generate new projects. Strolch offers the following archetypes, to create new projects:
strolch.mvn.archetype.main for Java main class applications strolch.mvn.archetype.webapp for Java Web based applications using REST and Polymer 1.x as the frontend. strolch.mvn.archetype.plc for Strolch PLC projects. To use the archetypes, clone the archetypes repository and install it locally:
git clone https://github.com/strolch-li/strolch-maven-archetypes.git cd strolch-maven-archetypes git checkout 0.1.0 mvn clean install Then follow one of the next steps to create the type of application you want.</description></item><item><title>Runtime Configuration</title><link>https://strolch.li/documentation/runtime-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/runtime-configuration/</guid><description>Runtime Configuration A Strolch runtime configuration comprises two parts: a configuration part, and a model part. The configuration are files located in the ..config/ folder, and the model are files located in the ../data folder.
In an absolute minimal configuration, the Strolch runtime requires the following folder structure:
../config/ ../StrolchConfiguration.xml → configures the Strolch agent ../PrivilegeConfig.xml → configures user management ../PrivilegeUsers.xml → contains the users in an XML based user management file .</description></item><item><title>Web App</title><link>https://strolch.li/development/web-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/development/web-app/</guid><description>Prerequisites To start developing web-based Strolch apps you need the following:
Apache Tomcat 9.x (10.x isn&amp;rsquo;t supported yet). Just unpack it somewhere, to be used later, when running the application. NodeJS v11.x (other versions don&amp;rsquo;t work with Bower, the installation is described below. Note: Strolch&amp;rsquo;s Web UI is still using Polymer 1.x. This isn&amp;rsquo;t a big concern, as thanks to the polyfills, it works on all browsers, including Internet Explorer 11.</description></item><item><title>Architecture</title><link>https://strolch.li/plc/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/plc/architecture/</guid><description>Architecture Overview The Strolch PLC architecture sees the Strolch Agent as the server, managing logical devices, i.e. multiple sensors and actors together and thus deciding on further steps. With this architecture multiple PLCs can be combined in one agent for flow control.
PLC Architecture On the agent side the two main classes are the PlcGwServerHandler and the PlcGwService
The PlcGwServerHandler handles connections from remote PLCs over WebSockets and sends the requests to these PLCs.</description></item><item><title>Main Class App</title><link>https://strolch.li/development/main-class-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/development/main-class-app/</guid><description>Creating a Strolch App The following shows the maven command to create the new maven project using Strolch&amp;rsquo;s main maven archetype. Note that you should replace the placeholders in the brackets:
Note: you need to have the Strolch Maven archetypes installed to your local maven repo, otherwise the following command will fail.
mvn archetype:generate \ -DarchetypeGroupId=li.strolch \ -DarchetypeArtifactId=strolch.mvn.archetype.main \ -DarchetypeVersion=0.1.0-SNAPSHOT \ -DgroupId=&amp;lt;my.groupid&amp;gt; \ -DartifactId=&amp;lt;my-artifactId&amp;gt; \ -Dversion=&amp;lt;my.</description></item><item><title>Realms</title><link>https://strolch.li/documentation/realms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/realms/</guid><description>Realms Realms implement multi-tenant capabilities. A Strolch agent can have an arbitrary number of realms configured and each realm has its own persistence configuration, allowing to separate mandates completely.
A realm can run in one of the following modes:
EMPTY This is a transient data store mode, where no model changes are persisted - they are only kept in memory. When the Strolch agent is started, this realm is empty as no data is loaded.</description></item><item><title>Components</title><link>https://strolch.li/documentation/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/components/</guid><description>Components A Strolch agent can be easily extended with arbitrary components. An agent is basically a container for classes extending StrolchComponent with a life cycle. These classes mostly implement an interface which describes the operations that are supported by the component.
The following represents a list of the most used components:
RealmHandler: li.strolch.agent.impl.DefaultRealmHandler PrivilegeHandler: li.strolch.runtime.privilege.DefaultStrolchPrivilegeHandler EnumHandler: li.strolch.runtime.query.enums.DefaultEnumHandler PolicyHandler: li.strolch.policy.DefaultPolicyHandler ServiceHandler: li.strolch.service.api.DefaultServiceHandler StrolchSessionHandler: li.strolch.rest.DefaultStrolchSessionHandler PersistenceHandler: multiple implementations PostInitializer: project specific implementation MailHandler: li.</description></item><item><title>Services and Commands</title><link>https://strolch.li/documentation/services-and-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/services-and-commands/</guid><description>Services and Commands Services are written to implement a specific use-case. Commands are written to implement re-usable parts of a use-case. The use-case can be abstract e.g., AddResourceService or very specific e.g. CreatePatientService.
Should the use-case be re-usable in different scenarios, then commands should implement the logic, and the services should then execute the commands. E.g. The CreatePatientService would use a CreatePatientResourceCommand and then use an AddResourceCommand in a single transaction, so that the task of creating the actual Patient Resource can be re-used somewhere else.</description></item><item><title>Searches</title><link>https://strolch.li/documentation/searches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/searches/</guid><description>Searches As is custom for every framework, querying, or searching, the model must be possible. Strolch searches are implemented using the StrolchSearch class and one of its concrete implementations: ResourceSearch, OrderSearch, ActivitySearch.
A Strolch element always has two identifiers: Type and Id. The type is important as it classifies an element. So if a car and a house would be modelled in Strolch, then those would both be a Resource, but one of type Car and the other of type House.</description></item><item><title>Queries</title><link>https://strolch.li/documentation/queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/queries/</guid><description>Queries The Query API is deprecated and the search API should be used instead.
As is custom for every framework, querying the model must be possible. Strolch queries are implemented using the StrolchQuery interface and one of its concrete implementations: ResourceQuery, OrderQuery, ActivityQuery.
A Strolch element always has two identifiers: Type and Id. The type is important as it classifies an element. So if a car and a house would be modelled in Strolch, then those would both be a Resource, but one of type Car and the other of type House.</description></item><item><title>Converting Existing App</title><link>https://strolch.li/development/converting-existing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/development/converting-existing/</guid><description>Converting an existing application You can convert an existing application to a Strolch agent, but this might be a bit daunting in the beginning. If you are planning on doing this, first create a test application using the maven archetypes, so that you can get a feel for the configuration.
Once that works, use the archetypes configuration to reconfigure your project to start as a Strolch agent.
Note: Beware to select the archetype pertaining to your use case:</description></item><item><title>Example Set-Up</title><link>https://strolch.li/plc/example-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/plc/example-set-up/</guid><description>Example Set-Up This example setup describes the movement of containers over conveyors. The conveyors have motors which can be started and stopped by a GPIO output pin controlled on a Raspberry Pi and each conveyor has a light barrier to detect the occupancy of a container and the Raspberry Pi detects this on GPIO input pins.
Further at each conveyor location is a barcode reader to read the ID of a container.</description></item><item><title>Transactions</title><link>https://strolch.li/documentation/transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/transactions/</guid><description>Transactions Strolch Transactions play a central role in a Strolch agent. A transaction is opened for a realm, and grants access to the model of the agent. Transactions are implemented as a Java try-with-resources by implementing the AutoCloseable interface. This makes it trivial to understand the scope of a transaction.
Transactions handle the following:
Opening and closing database connections Releasing locks to strolch elements, if tx.lock(StrolchRootElement) or tx.lock(Locator) was called Performing Commands by executing them in the added order, and validating them first.</description></item><item><title>Policies</title><link>https://strolch.li/documentation/policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/policies/</guid><description>Policies Policies are an integral part when writing business logic in Strolch. In many cases it would suffice to write all such logic in Services and Commands, but as soon as behaviour can change, depending on the element being accessed, then this would quickly lead to many if/else blocks.
Since writing large if/else blocks is not maintanable in the long run, Strolch offers a different approach. All Strolch elements can store Policy definitions.</description></item><item><title>Observers</title><link>https://strolch.li/documentation/observers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/observers/</guid><description>Observers All changes done in a Strolch transaction are recorded and then propagated to any registered observers.
The observer feature is opt-in and is configured for each realm. In the StrolchConfiguration.xml file enable observers by adding the enableObserverUpdates property per realm:
&amp;lt;StrolchConfiguration&amp;gt; &amp;lt;env id=&amp;#34;dev&amp;#34;&amp;gt; ... &amp;lt;Component&amp;gt; &amp;lt;name&amp;gt;RealmHandler&amp;lt;/name&amp;gt; &amp;lt;api&amp;gt;li.strolch.agent.api.RealmHandler&amp;lt;/api&amp;gt; &amp;lt;impl&amp;gt;li.strolch.agent.impl.DefaultRealmHandler&amp;lt;/impl&amp;gt; &amp;lt;depends&amp;gt;PrivilegeHandler&amp;lt;/depends&amp;gt; &amp;lt;Properties&amp;gt; &amp;lt;realms&amp;gt;defaultRealm, otherRealm&amp;lt;/realms&amp;gt; &amp;lt;enableObserverUpdates&amp;gt;true&amp;lt;/enableObserverUpdates&amp;gt; &amp;lt;dataStoreMode&amp;gt;TRANSIENT&amp;lt;/dataStoreMode&amp;gt; &amp;lt;dataStoreFile&amp;gt;StrolchModel.xml&amp;lt;/dataStoreFile&amp;gt; &amp;lt;enableObserverUpdates.otherRealm&amp;gt;true&amp;lt;/enableObserverUpdates.otherRealm&amp;gt; &amp;lt;dataStoreMode.otherRealm&amp;gt;TRANSIENT&amp;lt;/dataStoreMode.otherRealm&amp;gt; &amp;lt;dataStoreFile.otherRealm&amp;gt;StrolchModel.xml&amp;lt;/dataStoreFile.otherRealm&amp;gt; &amp;lt;/Properties&amp;gt; &amp;lt;/Component&amp;gt; &amp;lt;/env&amp;gt; ... &amp;lt;/StrolchConfiguration&amp;gt; Registering for updates is done by registering an Observer on the ObserverHandler of the realm itself:</description></item><item><title>Versioning</title><link>https://strolch.li/documentation/versioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/versioning/</guid><description>Versioning One of Strolch&amp;rsquo;s features that sets it apart from other frameworks, is that versioning is baked into Strolch&amp;rsquo;s fabric. The feature is opt-in, as it is not required in all projects, but it only needs enabling, for all modifications to objects to be versioned, so that rollbacks can be done when needed.
The feature is enabled for each realm. In the StrolchConfiguration.xml file enable it by adding the enableVersioning propery per realm:</description></item><item><title>Reports</title><link>https://strolch.li/documentation/reports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/reports/</guid><description>Reports Since Strolch has a generic model, it was rather straight forward to create a simple API for writing reports. In Strolch a report is defined by using its own model, i.e. a Report is a Resource of type Report.
A report consists of the following parts:
policy definition, thus allowing extensions basic configuration like base object type, order direction, etc. column definitions joins ordering definition filters An example of a report is as follows:</description></item><item><title>Privileges</title><link>https://strolch.li/documentation/priviles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://strolch.li/documentation/priviles/</guid><description>Privileges No framework is complete without user management and privilege validation. The basic form would be Users and Roles, and then validating that an authenticated user has a given role. In Strolch we go a step further: A User has roles assigned, and each role has a set of Privileges. The privileges can overlap, a validation is performed to make sure that the one role doesn&amp;rsquo;t deny and another role allows a specific action.</description></item></channel></rss>